/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mentorshipproject;

import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.PTBTokenizer;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import java.math.*;

/**
 *
 * @author Pranav
 */
public class Project extends javax.swing.JFrame {

    /**
     * Creates new form Project
     */
    public Project() {
        initComponents();
        setTitle("Document Comparison");
        textOutput.setLineWrap(true);
        textOutput.setWrapStyleWord(true);
        textInput.setLineWrap(true);
        textInput.setWrapStyleWord(true);
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textOutput = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textInput.setColumns(20);
        textInput.setRows(5);
        jScrollPane1.setViewportView(textInput);

        textOutput.setColumns(20);
        textOutput.setRows(5);
        jScrollPane2.setViewportView(textOutput);

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addComponent(submitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addComponent(submitButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        textOutput.setText(null);
        

        
        String input = textInput.getText();
        //textOutput.append(input);


        try {
            PrintWriter writer = new PrintWriter("C:\\Users\\prana\\Desktop\\TestDocs\\InputDoc.txt", "UTF-8");
            writer.println(input);
            writer.close();

            File f1 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\CosineSimilarity.txt");
            File f2 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\USA.txt");
            File f3 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\Russia.txt");
            File f4 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\UnitedKingdom.txt");
            File f5 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\France.txt");
            File f6 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\Canada.txt");
            File f7 = new File("C:\\Users\\prana\\Desktop\\TestDocs\\InputDoc.txt");

            PTBTokenizer<CoreLabel> ptbt1 = new PTBTokenizer<>(new FileReader(f1), new CoreLabelTokenFactory(), "");
            PTBTokenizer<CoreLabel> ptbt2 = new PTBTokenizer<>(new FileReader(f2), new CoreLabelTokenFactory(), "");
            PTBTokenizer<CoreLabel> ptbt3 = new PTBTokenizer<>(new FileReader(f3), new CoreLabelTokenFactory(), "");
            PTBTokenizer<CoreLabel> ptbt4 = new PTBTokenizer<>(new FileReader(f4), new CoreLabelTokenFactory(), "");
            PTBTokenizer<CoreLabel> ptbt5 = new PTBTokenizer<>(new FileReader(f5), new CoreLabelTokenFactory(), "");
            PTBTokenizer<CoreLabel> ptbt6 = new PTBTokenizer<>(new FileReader(f6), new CoreLabelTokenFactory(), "");
            PTBTokenizer<CoreLabel> ptbt7 = new PTBTokenizer<>(new FileReader(f7), new CoreLabelTokenFactory(), "");

            ArrayList l1 = new ArrayList(ptbt1.tokenize());
            ArrayList l2 = new ArrayList(ptbt2.tokenize());
            ArrayList l3 = new ArrayList(ptbt3.tokenize());
            ArrayList l4 = new ArrayList(ptbt4.tokenize());
            ArrayList l5 = new ArrayList(ptbt5.tokenize());
            ArrayList l6 = new ArrayList(ptbt6.tokenize());
            ArrayList l7 = new ArrayList(ptbt7.tokenize());

            ArrayList<ArrayList<CoreLabel>> docs = new ArrayList<ArrayList<CoreLabel>>();

            docs.add(l1);
            docs.add(l2);
            docs.add(l3);
            docs.add(l4);
            docs.add(l5);
            docs.add(l6);
            docs.add(l7);

            ArrayList<Double> v1 = createVector(docs,0);
            ArrayList<Double> v2 = createVector(docs,1);
            ArrayList<Double> v3 = createVector(docs,2);
            ArrayList<Double> v4 = createVector(docs,3);
            ArrayList<Double> v5 = createVector(docs,4);
            ArrayList<Double> v6 = createVector(docs,5);
            ArrayList<Double> v7 = createVector(docs,6);
            
            double s1 = cosineSimilarity(v1, v7);
            double s2 = cosineSimilarity(v2, v7);
            double s3 = cosineSimilarity(v3, v7);
            double s4 = cosineSimilarity(v4, v7);
            double s5 = cosineSimilarity(v5, v7);
            double s6 = cosineSimilarity(v6, v7);
            
            s1 = round(s1, 4);
            s2 = round(s2, 4);
            s3 = round(s3, 4);
            s4 = round(s4, 4);
            s5 = round(s5, 4);
            s6 = round(s6, 4);

            String output = "";
            
            output += "Similarity to \"CosineSimilarity.txt\" = ";            
            output += Double.toString(s1) + "\n";
            
            output += "Similarity to \"USA.txt\" = ";            
            output += Double.toString(s2) + "\n";
            
            output += "Similarity to \"Russia.txt\" = ";            
            output += Double.toString(s3) + "\n";
            
            output += "Similarity to \"UnitedKingdom.txt\" = ";            
            output += Double.toString(s4) + "\n";
            
            output += "Similarity to \"France.txt\" = ";            
            output += Double.toString(s5) + "\n";
            
            output += "Similarity to \"Canada.txt\" = ";            
            output += Double.toString(s6) + "\n";
            
            if (s1 >= s2 && s1 >= s3 && s1 >= s4 && s1 >= s5 && s1 >= s6) {
                output += "\n\n\n\n";
                output += "Your document is most closely related with the \"CosineSimilarity.txt\" document, with a similarity score of ";
                output += Double.toString(s1);
                output += ".";
            }
            if (s2 >= s1 && s2 >= s3 && s2 >= s4 && s2 >= s5 && s2 >= s6) {
                output += "\n\n\n\n";
                output += "Your document is most closely related with the \"USA.txt\" document, with a similarity score of ";
                output += Double.toString(s2);
                output += ".";
            }
            if (s3 >= s2 && s3 >= s1 && s3 >= s4 && s3 >= s5 && s3 >= s6) {
                output += "\n\n\n\n";
                output += "Your document is most closely related with the \"Russia.txt\" document, with a similarity score of ";
                output += Double.toString(s3);
                output += ".";
            }
            if (s4 >= s2 && s4 >= s3 && s4 >= s1 && s4 >= s5 && s4 >= s6) {
                output += "\n\n\n\n";
                output += "Your document is most closely related with the \"UnitedKingdom.txt\" document, with a similarity score of ";
                output += Double.toString(s4);
                output += ".";
            }
            if (s5 >= s2 && s5 >= s3 && s5 >= s4 && s5 >= s1 && s5 >= s6) {
                output += "\n\n\n\n";
                output += "Your document is most closely related with the \"France.txt\" document, with a similarity score of ";
                output += Double.toString(s5);
                output += ".";
            }
            if (s6 >= s2 && s6 >= s3 && s6 >= s4 && s6 >= s5 && s6 >= s1) {
                output += "\n\n\n\n";
                output += "Your document is most closely related with the \"Canada.txt\" document, with a similarity score of ";
                output += Double.toString(s6);
                output += ".";
            }
            
            System.out.println(output);
            textOutput.append(output);
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Project().setVisible(true);
                
            }
        });
        
        
    }
    
    public static double tf (ArrayList<CoreLabel> doc, String term) {
        int count = 0;

        for (int i = 0; i < doc.size(); i++) {
            if (doc.get(i).toString().equalsIgnoreCase(term)) {
                count ++;
            }
        }

        return (count*1.0)/doc.size();
    }

    public static double idf (ArrayList<ArrayList<CoreLabel>> docs, String term) {

        int count = 0;

        for (int i = 0; i < docs.size(); i++) {
            for (int j = 0; j < docs.get(i).size(); j++) {
                if (docs.get(i).get(j).toString().equalsIgnoreCase(term)) {
                    count++;
                    break;
                }
            }
        }

        double output = Math.log((docs.size()*1.0)/(count));
        return output;
    }

    public static ArrayList<String> uniqueWords(ArrayList<ArrayList<CoreLabel>> docs) {

        ArrayList<String> output = new ArrayList<String>();
        boolean isUniqueWord = false;
        int count = 0;

        output.add(docs.get(0).get(0).toString());

        for (int i = 0; i < docs.size(); i++) {
            for (int j = 0; j < docs.get(i).size(); j++) {
                count = 0;
                for (int k = 0; k < output.size(); k++) {
                    if (output.get(k).equalsIgnoreCase(docs.get(i).get(j).toString())) {
                        count++;
                    }
                }
                if (count == 0) {
                    output.add(docs.get(i).get(j).toString());
                    isUniqueWord = true;
                }
            }
        }

        return output;
    }

    public static ArrayList<Double> createVector(ArrayList<ArrayList<CoreLabel>> docs, int index) {

        ArrayList<Double> output = new ArrayList<Double>();

        if (!(index >= 0 && index < docs.size())) {
            System.err.println("ERROR: INDEX IS NOT VALID");
            return output;
        }

        ArrayList<String> words = newUniqueWords(docs);

        for (int i = 0; i < words.size(); i++) {
            output.add(tf(docs.get(index), words.get(i)) * idf(docs, words.get(i)));
        }

        return output;
    }

    public static double cosineSimilarity(ArrayList<Double> one, ArrayList<Double> two) {

        double dot = 0;
        double magone = 0;
        double magtwo = 0;

        if (one.size() != two.size()) {
            System.err.println("ERROR: VECTORS DO NOT HAVE SAME MAGNITUDE");

            return 0.0;
        }

        for (int i = 0; i < one.size(); i++) {
            dot += one.get(i) * two.get(i);
            magone += one.get(i) * one.get(i);
            magtwo += two.get(i) * two.get(i);
        }

        magone = Math.sqrt(magone);
        magtwo = Math.sqrt(magtwo);

        return dot/(magone * magtwo);
    }

    public static ArrayList<String> newUniqueWords(ArrayList<ArrayList<CoreLabel>> docs) {

        Set<String> unique = new HashSet<>();

        for (ArrayList<CoreLabel> doc : docs) {
            for (CoreLabel term : doc) {
                unique.add(term.toString().toLowerCase());
            }
        }

        ArrayList<String> out = new ArrayList<String>(unique);
        return out;
    }
    
    public static double round(double value, int places) {
    if (places < 0) throw new IllegalArgumentException();
    
    if (Double.isNaN(value) || value == 0) {
        return 0;
    }
    
    BigDecimal bd = new BigDecimal(value);
    bd = bd.setScale(places, RoundingMode.HALF_UP);
    return bd.doubleValue();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextArea textInput;
    private javax.swing.JTextArea textOutput;
    // End of variables declaration//GEN-END:variables
}
